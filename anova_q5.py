'''
Script written by Audrey McNay
Contact me at amcnay@utexas.edu

Outputs ANOVA and post-hoc results for survey data.

Requires numpy and scipi libraries.

##### Information #####
Question: "How hard was it to find information about...?"

Numbers in tuple represent results from a seven-point likert scale.
# “1” represents the best possible experience and “7” represents the worst possible experience.

apply: while Applying to UT
after: after applying to UT
enroll: enrolling at UT
finaid: financial aid
housing: on-campus housing
registr: registration

'''

import numpy as np
from scipy import stats

from statsmodels.stats.multicomp import pairwise_tukeyhsd
from statsmodels.stats.multicomp import MultiComparison


data = np.rec.array([
('apply', 5),
('apply', 6),
('apply', 3),
('apply', 3),
('apply', 3),
('apply', 4),
('apply', 2),
('apply', 3),
('apply', 4),
('apply', 1),
('apply', 3),
('apply', 3),
('apply', 1),
('apply', 2),
('apply', 1),
('apply', 5),
('apply', 1),
('apply', 3),
('apply', 4),
('apply', 1),
('apply', 2),
('apply', 3),
('apply', 4),
('apply', 5),
('apply', 1),
('apply', 1),
('apply', 6),
('apply', 1),
('apply', 2),
('apply', 3),
('apply', 2),
('apply', 2),
('apply', 3),
('apply', 1),
('apply', 2),
('apply', 2),
('apply', 2),
('apply', 1),
('apply', 3),
('apply', 2),
('apply', 6),
('apply', 7),
('apply', 1),
('apply', 1),
('apply', 1),
('apply', 2),
('apply', 3),
('apply', 2),
('apply', 2),
('apply', 2),
('apply', 2),
('apply', 2),
('apply', 1),
('apply', 5),
('apply', 2),
('apply', 2),
('apply', 5),
('apply', 2),
('apply', 2),
('apply', 3),
('apply', 6),
('apply', 1),
('apply', 7),
('apply', 2),
('apply', 1),
('apply', 1),
('apply', 2),
('apply', 3),
('apply', 2),
('apply', 1),
('apply', 6),
('apply', 4),
('apply', 6),
('apply', 4),
('apply', 2),
('apply', 1),
('apply', 1),
('apply', 5),
('after', 6),
('after', 6),
('after', 2),
('after', 5),
('after', 3),
('after', 4),
('after', 2),
('after', 6),
('after', 4),
('after', 1),
('after', 3),
('after', 4),
('after', 3),
('after', 6),
('after', 4),
('after', 1),
('after', 5),
('after', 4),
('after', 2),
('after', 1),
('after', 5),
('after', 3),
('after', 4),
('after', 1),
('after', 2),
('after', 6),
('after', 2),
('after', 2),
('after', 4),
('after', 2),
('after', 2),
('after', 2),
('after', 1),
('after', 2),
('after', 4),
('after', 5),
('after', 2),
('after', 6),
('after', 2),
('after', 5),
('after', 7),
('after', 2),
('after', 1),
('after', 1),
('after', 3),
('after', 5),
('after', 2),
('after', 4),
('after', 1),
('after', 2),
('after', 2),
('after', 3),
('after', 3),
('after', 4),
('after', 2),
('after', 5),
('after', 5),
('after', 2),
('after', 5),
('after', 6),
('after', 2),
('after', 3),
('after', 2),
('after', 1),
('after', 1),
('after', 5),
('after', 4),
('after', 4),
('after', 2),
('after', 4),
('after', 2),
('after', 5),
('after', 5),
('after', 2),
('after', 2),
('after', 2),
('after', 4),
('enroll', 6),
('enroll', 6),
('enroll', 5),
('enroll', 2),
('enroll', 3),
('enroll', 5),
('enroll', 2),
('enroll', 4),
('enroll', 4),
('enroll', 1),
('enroll', 3),
('enroll', 3),
('enroll', 1),
('enroll', 2),
('enroll', 7),
('enroll', 4),
('enroll', 1),
('enroll', 3),
('enroll', 4),
('enroll', 4),
('enroll', 1),
('enroll', 4),
('enroll', 2),
('enroll', 5),
('enroll', 1),
('enroll', 1),
('enroll', 6),
('enroll', 2),
('enroll', 1),
('enroll', 5),
('enroll', 2),
('enroll', 2),
('enroll', 3),
('enroll', 1),
('enroll', 2),
('enroll', 3),
('enroll', 4),
('enroll', 2),
('enroll', 1),
('enroll', 2),
('enroll', 6),
('enroll', 7),
('enroll', 2),
('enroll', 1),
('enroll', 1),
('enroll', 4),
('enroll', 5),
('enroll', 2),
('enroll', 3),
('enroll', 1),
('enroll', 2),
('enroll', 2),
('enroll', 3),
('enroll', 4),
('enroll', 4),
('enroll', 1),
('enroll', 5),
('enroll', 2),
('enroll', 4),
('enroll', 3),
('enroll', 6),
('enroll', 2),
('enroll', 7),
('enroll', 2),
('enroll', 1),
('enroll', 2),
('enroll', 1),
('enroll', 3),
('enroll', 3),
('enroll', 1),
('enroll', 7),
('enroll', 3),
('enroll', 5),
('enroll', 4),
('enroll', 2),
('enroll', 2),
('enroll', 2),
('enroll', 4),
('finaid', 6),
('finaid', 6),
('finaid', 4),
('finaid', 6),
('finaid', 6),
('finaid', 4),
('finaid', 6),
('finaid', 7),
('finaid', 5),
('finaid', 1),
('finaid', 3),
('finaid', 4),
('finaid', 1),
('finaid', 5),
('finaid', 7),
('finaid', 5),
('finaid', 2),
('finaid', 6),
('finaid', 4),
('finaid', 5),
('finaid', 5),
('finaid', 6),
('finaid', 5),
('finaid', 7),
('finaid', 3),
('finaid', 5),
('finaid', 7),
('finaid', 4),
('finaid', 5),
('finaid', 2),
('finaid', 3),
('finaid', 6),
('finaid', 5),
('finaid', 1),
('finaid', 6),
('finaid', 6),
('finaid', 5),
('finaid', 5),
('finaid', 5),
('finaid', 2),
('finaid', 6),
('finaid', 7),
('finaid', 5),
('finaid', 1),
('finaid', 1),
('finaid', 7),
('finaid', 6),
('finaid', 4),
('finaid', 5),
('finaid', 2),
('finaid', 5),
('finaid', 5),
('finaid', 5),
('finaid', 4),
('finaid', 5),
('finaid', 2),
('finaid', 6),
('finaid', 5),
('finaid', 6),
('finaid', 5),
('finaid', 7),
('finaid', 6),
('finaid', 7),
('finaid', 4),
('finaid', 3),
('finaid', 6),
('finaid', 7),
('finaid', 4),
('finaid', 3),
('finaid', 4),
('finaid', 6),
('finaid', 7),
('finaid', 5),
('finaid', 6),
('finaid', 2),
('finaid', 4),
('finaid', 3),
('finaid', 5),
('housing', 6),
('housing', 3),
('housing', 5),
('housing', 3),
('housing', 4),
('housing', 3),
('housing', 5),
('housing', 5),
('housing', 5),
('housing', 1),
('housing', 3),
('housing', 3),
('housing', 1),
('housing', 5),
('housing', 7),
('housing', 4),
('housing', 1),
('housing', 5),
('housing', 5),
('housing', 3),
('housing', 3),
('housing', 5),
('housing', 2),
('housing', 6),
('housing', 3),
('housing', 5),
('housing', 5),
('housing', 1),
('housing', 5),
('housing', 3),
('housing', 4),
('housing', 2),
('housing', 5),
('housing', 1),
('housing', 2),
('housing', 4),
('housing', 2),
('housing', 1),
('housing', 3),
('housing', 3),
('housing', 5),
('housing', 7),
('housing', 3),
('housing', 1),
('housing', 4),
('housing', 4),
('housing', 4),
('housing', 4),
('housing', 5),
('housing', 2),
('housing', 2),
('housing', 2),
('housing', 3),
('housing', 3),
('housing', 5),
('housing', 2),
('housing', 7),
('housing', 6),
('housing', 4),
('housing', 4),
('housing', 7),
('housing', 2),
('housing', 4),
('housing', 7),
('housing', 1),
('housing', 2),
('housing', 4),
('housing', 2),
('housing', 4),
('housing', 4),
('housing', 4),
('housing', 7),
('housing', 4),
('housing', 6),
('housing', 4),
('housing', 4),
('housing', 4),
('housing', 6),
('registr', 6),
('registr', 6),
('registr', 6),
('registr', 2),
('registr', 6),
('registr', 2),
('registr', 5),
('registr', 6),
('registr', 6),
('registr', 1),
('registr', 2),
('registr', 5),
('registr', 5),
('registr', 4),
('registr', 7),
('registr', 6),
('registr', 1),
('registr', 4),
('registr', 6),
('registr', 5),
('registr', 5),
('registr', 4),
('registr', 7),
('registr', 5),
('registr', 7),
('registr', 2),
('registr', 3),
('registr', 3),
('registr', 7),
('registr', 3),
('registr', 2),
('registr', 1),
('registr', 5),
('registr', 2),
('registr', 3),
('registr', 5),
('registr', 3),
('registr', 1),
('registr', 5),
('registr', 4),
('registr', 5),
('registr', 2),
('registr', 6),
('registr', 1),
('registr', 1),
('registr', 2),
('registr', 3),
('registr', 7),
('registr', 1),
('registr', 3),
('registr', 5),
('registr', 2),
('registr', 4),
('registr', 5),
('registr', 6),
('registr', 5),
('registr', 2),
('registr', 5),
('registr', 7),
('registr', 6),
('registr', 7),
('registr', 7),
('registr', 6),
('registr', 1),
('registr', 3),
('registr', 5),
('registr', 5),
('registr', 4),
('registr', 3),
('registr', 5),
('registr', 3),
('registr', 7),
('registr', 4),
('registr', 2),
('registr', 4),
('registr', 2),
('registr', 5)], dtype = [('Area', '|U10'), ('Rating', 'f8')])

#calculate ANOVA
print('One-way ANOVA: Q5')
print('=============')

f, p = stats.f_oneway(data[data['Area'] == 'apply'].Rating,
                      data[data['Area'] == 'after'].Rating,
                      data[data['Area'] == 'enroll'].Rating,
                      data[data['Area'] == 'finaid'].Rating,
                      data[data['Area'] == 'housing'].Rating,
                      data[data['Area'] == 'registr'].Rating)
 
print ('F value:', f)
print ('P value:', p, '\n')

#calculate post-hoc
mc = MultiComparison(data['Rating'], data['Area'])
result = mc.tukeyhsd()
 
print(result)
print(mc.groupsunique)

